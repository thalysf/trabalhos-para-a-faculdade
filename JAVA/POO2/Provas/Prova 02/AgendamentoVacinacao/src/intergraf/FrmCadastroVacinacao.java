package intergraf;

import dominio.Paciente;
import dominio.Vacina;
import gertarefas.FuncoesUteis;
import gertarefas.GerInterGrafica;
import java.sql.SQLException;
import java.text.ParseException;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.List;
import javax.swing.JOptionPane;
import javax.swing.table.DefaultTableModel;

/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
/**
 *
 * @author carol
 */
public class FrmCadastroVacinacao extends javax.swing.JFrame {

    private GerInterGrafica gerIG;

    public FrmCadastroVacinacao(GerInterGrafica newGerIG) {
        gerIG = newGerIG;
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        grupoVacinas = new javax.swing.ButtonGroup();
        jPopupResumo = new javax.swing.JPopupMenu();
        jMenuItemInserir = new javax.swing.JMenuItem();
        jMenuItem1 = new javax.swing.JMenuItem();
        jLabel1 = new javax.swing.JLabel();
        jPanel1 = new javax.swing.JPanel();
        Nome = new javax.swing.JLabel();
        CPF = new javax.swing.JLabel();
        txtNome = new javax.swing.JTextField();
        jLabel2 = new javax.swing.JLabel();
        txtId = new javax.swing.JTextField();
        txtCPF = new javax.swing.JFormattedTextField();
        jPanel2 = new javax.swing.JPanel();
        rbtDose1 = new javax.swing.JRadioButton();
        rbtDose2 = new javax.swing.JRadioButton();
        Vacina = new javax.swing.JLabel();
        cmbVacinas = new javax.swing.JComboBox<>();
        rbtOutras = new javax.swing.JRadioButton();
        btnInserir = new javax.swing.JButton();
        jPanel3 = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        tabResumo = new javax.swing.JTable();
        painelData1 = new javax.swing.JPanel();
        Data1 = new javax.swing.JLabel();
        txtDataDose1 = new javax.swing.JTextField();
        painelData2 = new javax.swing.JPanel();
        Data2 = new javax.swing.JLabel();
        txtDataDose2 = new javax.swing.JTextField();
        btnPesqTodos = new javax.swing.JButton();
        btnPesq2Dose = new javax.swing.JButton();
        btnPesqPorVacina = new javax.swing.JButton();

        jMenuItemInserir.setText("jMenuItem1");
        jMenuItemInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirActionPerformed(evt);
            }
        });
        jPopupResumo.add(jMenuItemInserir);

        jMenuItem1.setText("jMenuItem1");
        jPopupResumo.add(jMenuItem1);

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Sistema Nacional de Vacinação");

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLabel1.setForeground(new java.awt.Color(0, 102, 204));
        jLabel1.setText("Agenda Vacinação");

        jPanel1.setBorder(javax.swing.BorderFactory.createTitledBorder("Dados Pessoais"));

        Nome.setText("Nome");

        CPF.setText("CPF");

        jLabel2.setText("ID");

        txtId.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyReleased(java.awt.event.KeyEvent evt) {
                txtIdKeyReleased(evt);
            }
        });

        try {
            txtCPF.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("###.###.###-##")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addGap(18, 18, 18)
                        .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, 48, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(66, 66, 66)
                        .addComponent(CPF)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(txtCPF, javax.swing.GroupLayout.PREFERRED_SIZE, 99, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.LEADING, jPanel1Layout.createSequentialGroup()
                        .addComponent(Nome)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, 237, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(CPF)
                    .addComponent(jLabel2)
                    .addComponent(txtId, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(txtCPF, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Nome)
                    .addComponent(txtNome, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jPanel2.setBorder(javax.swing.BorderFactory.createTitledBorder("Tipo Vacina"));

        grupoVacinas.add(rbtDose1);
        rbtDose1.setMnemonic('1');
        rbtDose1.setText("COVID - 1ª dose");
        rbtDose1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtDose1ActionPerformed(evt);
            }
        });

        grupoVacinas.add(rbtDose2);
        rbtDose2.setMnemonic('2');
        rbtDose2.setText("COVID - 2ª dose");
        rbtDose2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtDose2ActionPerformed(evt);
            }
        });

        Vacina.setText("Nome da Vacina");

        grupoVacinas.add(rbtOutras);
        rbtOutras.setMnemonic('O');
        rbtOutras.setText("Outras");
        rbtOutras.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                rbtOutrasActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(rbtDose1)
                        .addGap(18, 18, 18)
                        .addComponent(rbtDose2)
                        .addGap(18, 18, 18)
                        .addComponent(rbtOutras))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addComponent(Vacina)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cmbVacinas, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addGap(0, 0, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(rbtDose1)
                    .addComponent(rbtDose2)
                    .addComponent(rbtOutras))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Vacina)
                    .addComponent(cmbVacinas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31))
        );

        btnInserir.setText("Inserir");
        btnInserir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnInserirActionPerformed(evt);
            }
        });

        jPanel3.setBorder(javax.swing.BorderFactory.createTitledBorder("Resumo"));

        tabResumo.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {
                "ID", "Nome", "CPF", "Nome vacina", "Data1", "Data2", "Precisa Dose2"
            }
        ) {
            boolean[] canEdit = new boolean [] {
                false, false, false, false, false, false, false
            };

            public boolean isCellEditable(int rowIndex, int columnIndex) {
                return canEdit [columnIndex];
            }
        });
        tabResumo.setName(""); // NOI18N
        jScrollPane1.setViewportView(tabResumo);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane1, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 0, Short.MAX_VALUE)
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 471, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );

        painelData1.setBorder(javax.swing.BorderFactory.createTitledBorder("1ª Dose"));

        Data1.setText("Data");

        txtDataDose1.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDataDose1FocusLost(evt);
            }
        });

        javax.swing.GroupLayout painelData1Layout = new javax.swing.GroupLayout(painelData1);
        painelData1.setLayout(painelData1Layout);
        painelData1Layout.setHorizontalGroup(
            painelData1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelData1Layout.createSequentialGroup()
                .addComponent(Data1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtDataDose1, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 47, Short.MAX_VALUE))
        );
        painelData1Layout.setVerticalGroup(
            painelData1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelData1Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelData1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Data1)
                    .addComponent(txtDataDose1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        painelData2.setBorder(javax.swing.BorderFactory.createTitledBorder("2ª Dose"));

        Data2.setText("Data");

        txtDataDose2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusLost(java.awt.event.FocusEvent evt) {
                txtDataDose2FocusLost(evt);
            }
        });

        javax.swing.GroupLayout painelData2Layout = new javax.swing.GroupLayout(painelData2);
        painelData2.setLayout(painelData2Layout);
        painelData2Layout.setHorizontalGroup(
            painelData2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelData2Layout.createSequentialGroup()
                .addComponent(Data2)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(txtDataDose2, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
        );
        painelData2Layout.setVerticalGroup(
            painelData2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(painelData2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(painelData2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(Data2)
                    .addComponent(txtDataDose2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        btnPesqTodos.setText("Pesquisar todos");
        btnPesqTodos.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesqTodosActionPerformed(evt);
            }
        });

        btnPesq2Dose.setText("Pesq. 2ª dose");
        btnPesq2Dose.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesq2DoseActionPerformed(evt);
            }
        });

        btnPesqPorVacina.setText("Pesq. por Vacina");
        btnPesqPorVacina.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnPesqPorVacinaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(layout.createSequentialGroup()
                .addGap(4, 4, 4)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPanel1, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPanel3, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addComponent(btnInserir)
                                .addGap(18, 18, 18)
                                .addComponent(btnPesqTodos))
                            .addComponent(painelData1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(17, 17, 17)
                                .addComponent(btnPesq2Dose)
                                .addGap(18, 18, 18)
                                .addComponent(btnPesqPorVacina))
                            .addGroup(layout.createSequentialGroup()
                                .addGap(25, 25, 25)
                                .addComponent(painelData2, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                        .addGap(4, 4, 4)))
                .addContainerGap())
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addComponent(jLabel1)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, 81, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel2, javax.swing.GroupLayout.PREFERRED_SIZE, 86, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(painelData1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(painelData2, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(btnPesqPorVacina)
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(btnInserir)
                        .addComponent(btnPesqTodos)
                        .addComponent(btnPesq2Dose)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanel3, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void rbtDose1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtDose1ActionPerformed
        // Preencher Combo com as vacinas da COVID
        gerIG.pesquisarPorVacina(1, cmbVacinas);
        painelData1.setVisible(true);
        painelData2.setVisible(true);
    }//GEN-LAST:event_rbtDose1ActionPerformed

    private void btnInserirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnInserirActionPerformed
        if (cmbVacinas.getSelectedIndex() == -1) {
            JOptionPane.showMessageDialog(this, "Selecione um tipo de vacina e a vacina que deseja!");
        } else {
            // INserir no BANCO DE DADOS
            // Preenchendo campos
            Long id = 0L;
            if (!txtId.getText().isEmpty()) {
                id = Long.parseLong(txtId.getText());
            }
            String cpf = txtCPF.getText();
            String nome = txtNome.getText();
            Vacina vacinaSelecionada = (Vacina) cmbVacinas.getSelectedItem();
            Date dataDose01 = new Date();
            Date dataDose02 = new Date();

            // Inserindo um paciente NOVO
            if (rbtDose1.isSelected()) {
                boolean camposValidados = FuncoesUteis.validarCamposInsercao(id, cpf, nome, txtDataDose1.getText(), txtDataDose2.getText(), vacinaSelecionada, 1, this);
                if (camposValidados) {
                    try {
                        dataDose01 = FuncoesUteis.strToDate(txtDataDose1.getText());
                        dataDose02 = FuncoesUteis.strToDate(txtDataDose2.getText());
                        Paciente paciente = new Paciente(0L, nome, cpf, dataDose01, dataDose02, 1, vacinaSelecionada);
                        id = gerIG.getGerDominio().inserirPaciente(paciente);
                        JOptionPane.showMessageDialog(this, "Paciente de id " + id + " inserido com sucesso!");
                        pesquisarPacientePorId(id);
                    } catch (ClassNotFoundException | SQLException | ParseException e) {
                        JOptionPane.showMessageDialog(this, e);
                    }
                }
            } else if (rbtDose2.isSelected()) {
                boolean camposValidados = FuncoesUteis.validarCamposInsercao(id, cpf, nome, txtDataDose1.getText(), txtDataDose2.getText(), vacinaSelecionada, 2, this);
                if (camposValidados) {
                    try {
                        dataDose02 = FuncoesUteis.strToDate(txtDataDose2.getText());
                        Long idRetorno = gerIG.getGerDominio().alterarPaciente(id, dataDose02);
                        if (idRetorno == -1) {
                            JOptionPane.showMessageDialog(this, "Operação inválida!");
                        } else {
                            JOptionPane.showMessageDialog(this, "Paciente de id " + id + " atualizado com sucesso!");
                            pesquisarPacientePorId(id);
                        }

                    } catch (ClassNotFoundException | SQLException | ParseException e) {
                        JOptionPane.showMessageDialog(this, e);
                    }
                }

            } else if (rbtOutras.isSelected()) {
                boolean camposValidados = FuncoesUteis.validarCamposInsercao(id, cpf, nome, txtDataDose1.getText(), txtDataDose2.getText(), vacinaSelecionada, 3, this);
                if (camposValidados) {
                    try {
                        dataDose01 = FuncoesUteis.strToDate(txtDataDose1.getText());
                        Paciente paciente = new Paciente(0L, nome, cpf, dataDose01, null, 0, vacinaSelecionada);
                        id = gerIG.getGerDominio().inserirPaciente(paciente);
                        JOptionPane.showMessageDialog(this, "Paciente de id " + id + " inserido com sucesso!");
                    } catch (ClassNotFoundException | SQLException | ParseException e) {
                        JOptionPane.showMessageDialog(this, e);
                    }
                }
            }
        }
    }//GEN-LAST:event_btnInserirActionPerformed

    private void rbtOutrasActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtOutrasActionPerformed
        // Preencher Combo com as OUTRAS vacinas
        gerIG.pesquisarPorVacina(2, cmbVacinas);
        painelData1.setVisible(true);
        painelData2.setVisible(false);
        txtDataDose1.setText("");
        txtDataDose2.setText("");

    }//GEN-LAST:event_rbtOutrasActionPerformed

    private void rbtDose2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_rbtDose2ActionPerformed
        // Preencher Combo com as vacinas da COVID
        gerIG.pesquisarPorVacina(1, cmbVacinas);
        painelData1.setVisible(false);
        painelData2.setVisible(true);
    }//GEN-LAST:event_rbtDose2ActionPerformed

    private void txtDataDose2FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDataDose2FocusLost
        String strData1 = txtDataDose1.getText();
        String strData2 = txtDataDose2.getText();

        if (!("".equals(strData1)) && !("".equals(strData2))) {
            // Data 1 NÃO VAZIA

            Calendar data1 = new GregorianCalendar();
            Calendar data2 = new GregorianCalendar();

            try {
                data1.setTime(FuncoesUteis.strToDate(strData1));
                data2.setTime(FuncoesUteis.strToDate(strData2));

                Calendar min = (Calendar) data1.clone();
                Calendar max = (Calendar) data1.clone();

                String vacina = cmbVacinas.getSelectedItem().toString();

                if (vacina.equals("CoronaVac")) {
                    // Entre 14 e 28
                    min.add(Calendar.DAY_OF_MONTH, 14);
                    max.add(Calendar.DAY_OF_MONTH, 28);
                } else if (vacina.equals("AstraZeneca")) {
                    // Entre 77 e 84
                    min.add(Calendar.DAY_OF_MONTH, 77);
                    max.add(Calendar.DAY_OF_MONTH, 84);
                } else if (vacina.equals("Pfizer")) {
                    // Entre 21 e 30
                    min.add(Calendar.DAY_OF_MONTH, 21);
                    max.add(Calendar.DAY_OF_MONTH, 30);
                }

                if (data2.after(max)) {
                    JOptionPane.showMessageDialog(this, "A data da 2ª dose deve ser MENOR que " + FuncoesUteis.dateToStr(max.getTime()), "Intervalo da 2ª dose", JOptionPane.ERROR_MESSAGE);
                } else if (data2.before(min)) {
                    JOptionPane.showMessageDialog(this, "A data da 2ª dose deve ser MAIOR que " + FuncoesUteis.dateToStr(min.getTime()), "Intervalo da 2ª dose", JOptionPane.ERROR_MESSAGE);
                }
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "Data inválida!", "Conversão de data", JOptionPane.ERROR_MESSAGE);
            }
        } else {
            // SOMENTE VALIDAR A DATA 2
            try {
                if (!"".equals(strData2)) {
                    FuncoesUteis.strToDate(strData2);
                }
            } catch (ParseException ex) {
                JOptionPane.showMessageDialog(this, "Data da 2ª dose inválida!\n" + strData2, "Conversão de data", JOptionPane.ERROR_MESSAGE);
                txtDataDose2.requestFocusInWindow();
            }

        }


    }//GEN-LAST:event_txtDataDose2FocusLost

    private void txtDataDose1FocusLost(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_txtDataDose1FocusLost
        String strData1 = txtDataDose1.getText();

        Calendar data1 = new GregorianCalendar();
        Calendar data2 = new GregorianCalendar();
        try {
            data1.setTime(FuncoesUteis.strToDate(strData1));
            data2.setTime(data1.getTime());

            String vacina = cmbVacinas.getSelectedItem().toString();

            if (vacina.equals("CoronaVac")) {
                data2.add(Calendar.DAY_OF_MONTH, 21);    // 14 a 28
                txtDataDose2.setText(FuncoesUteis.dateToStr(data2.getTime()));
            } else if (vacina.equals("AstraZeneca")) {
                data2.add(Calendar.DAY_OF_MONTH, 80);   // 77 a 84
                txtDataDose2.setText(FuncoesUteis.dateToStr(data2.getTime()));
            } else if (vacina.equals("Pfizer")) {
                data2.add(Calendar.DAY_OF_MONTH, 21);   // 21 a 30
                txtDataDose2.setText(FuncoesUteis.dateToStr(data2.getTime()));
            } else {
                txtDataDose2.setText("");
            }

        } catch (ParseException ex) {
            JOptionPane.showMessageDialog(this, "Data da 1ª dose inválida!\n" + strData1, "Conversão de data", JOptionPane.ERROR_MESSAGE);
            txtDataDose1.requestFocusInWindow();
        }
    }//GEN-LAST:event_txtDataDose1FocusLost

    private void txtIdKeyReleased(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_txtIdKeyReleased
        // Pesquisando por ID conforme o usuário interage com o campo ID
        try {
            pesquisarPacientePorId(Long.parseLong(txtId.getText()));
        } catch (NumberFormatException ex) {
            if (!txtId.getText().isEmpty()) {
                JOptionPane.showMessageDialog(this, "Digite um ID válido!");
                txtId.setText("");
            }
            else
            {
                ((DefaultTableModel) tabResumo.getModel()).setRowCount(0);
            }
        }
    }//GEN-LAST:event_txtIdKeyReleased

    private void btnPesqTodosActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesqTodosActionPerformed
        // Pesquisando todos
        try {
            List<Paciente> pacientes = gerIG.listarPacientes();
            // Resetando tabela
            ((DefaultTableModel) tabResumo.getModel()).setRowCount(0);
            pacientes.stream().forEach((p) -> {
                ((DefaultTableModel) tabResumo.getModel()).addRow(p.toArray());
            });
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
    }//GEN-LAST:event_btnPesqTodosActionPerformed

    private void btnPesqPorVacinaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesqPorVacinaActionPerformed
        // Pesquisar por vacina
        if (cmbVacinas.getSelectedIndex() != -1) {
            try {
                List<Paciente> pacientes = gerIG.pesquisarPorVacina((Vacina) cmbVacinas.getSelectedItem());
                // Resetando tabela
                ((DefaultTableModel) tabResumo.getModel()).setRowCount(0);
                pacientes.stream().forEach((p) -> {
                    ((DefaultTableModel) tabResumo.getModel()).addRow(p.toArray());
                });
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        } else {
            JOptionPane.showMessageDialog(this, "Antes de pesquisar por tipo, selecione-o!");
        }
    }//GEN-LAST:event_btnPesqPorVacinaActionPerformed

    private void btnPesq2DoseActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnPesq2DoseActionPerformed
        // Pesquisar quem ainda precisa tomar a segunda dose
        try {
            List<Paciente> pacientes = gerIG.pesquisarSegundaDose();
            // Resetando tabela
            ((DefaultTableModel) tabResumo.getModel()).setRowCount(0);
            pacientes.stream().forEach((p) -> {
                ((DefaultTableModel) tabResumo.getModel()).addRow(p.toArray());
            });
        } catch (ClassNotFoundException | SQLException ex) {
            JOptionPane.showMessageDialog(this, ex);
        }
    }//GEN-LAST:event_btnPesq2DoseActionPerformed
    // Trecho de código encapsulado em um método pois é utilizado em mais de um lugar
    private void pesquisarPacientePorId(Long id)
    {
        if (id > 0) {
            try {
                Paciente paciente = gerIG.pesquisarPacientePorID(id);
                if (paciente.getIdPaciente() != null) {
                    // Resetando tabela
                    ((DefaultTableModel) tabResumo.getModel()).setRowCount(0);
                    // Inserindo o resultado da busca na tabela
                    ((DefaultTableModel) tabResumo.getModel()).addRow(paciente.toArray());
                } else {
                    // Resetando tabela
                    ((DefaultTableModel) tabResumo.getModel()).setRowCount(0);
                }
            } catch (ClassNotFoundException | SQLException ex) {
                JOptionPane.showMessageDialog(this, ex);
            }
        }
    }
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JLabel CPF;
    private javax.swing.JLabel Data1;
    private javax.swing.JLabel Data2;
    private javax.swing.JLabel Nome;
    private javax.swing.JLabel Vacina;
    private javax.swing.JButton btnInserir;
    private javax.swing.JButton btnPesq2Dose;
    private javax.swing.JButton btnPesqPorVacina;
    private javax.swing.JButton btnPesqTodos;
    private javax.swing.JComboBox<String> cmbVacinas;
    private javax.swing.ButtonGroup grupoVacinas;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JMenuItem jMenuItem1;
    private javax.swing.JMenuItem jMenuItemInserir;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPopupMenu jPopupResumo;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel painelData1;
    private javax.swing.JPanel painelData2;
    private javax.swing.JRadioButton rbtDose1;
    private javax.swing.JRadioButton rbtDose2;
    private javax.swing.JRadioButton rbtOutras;
    private javax.swing.JTable tabResumo;
    private javax.swing.JFormattedTextField txtCPF;
    private javax.swing.JTextField txtDataDose1;
    private javax.swing.JTextField txtDataDose2;
    private javax.swing.JTextField txtId;
    private javax.swing.JTextField txtNome;
    // End of variables declaration//GEN-END:variables
}
